// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pingpong.proto

#ifndef PROTOBUF_pingpong_2eproto__INCLUDED
#define PROTOBUF_pingpong_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace org {
namespace libcppa {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pingpong_2eproto();
void protobuf_AssignDesc_pingpong_2eproto();
void protobuf_ShutdownFile_pingpong_2eproto();

class Ping;
class Pong;
class PingOrPong;

// ===================================================================

class Ping : public ::google::protobuf::Message {
 public:
  Ping();
  virtual ~Ping();

  Ping(const Ping& from);

  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ping& default_instance();

  void Swap(Ping* other);

  // implements Message ----------------------------------------------

  Ping* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ping& from);
  void MergeFrom(const Ping& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:org.libcppa.Ping)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_pingpong_2eproto();
  friend void protobuf_AssignDesc_pingpong_2eproto();
  friend void protobuf_ShutdownFile_pingpong_2eproto();

  void InitAsDefaultInstance();
  static Ping* default_instance_;
};
// -------------------------------------------------------------------

class Pong : public ::google::protobuf::Message {
 public:
  Pong();
  virtual ~Pong();

  Pong(const Pong& from);

  inline Pong& operator=(const Pong& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pong& default_instance();

  void Swap(Pong* other);

  // implements Message ----------------------------------------------

  Pong* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pong& from);
  void MergeFrom(const Pong& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:org.libcppa.Pong)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_pingpong_2eproto();
  friend void protobuf_AssignDesc_pingpong_2eproto();
  friend void protobuf_ShutdownFile_pingpong_2eproto();

  void InitAsDefaultInstance();
  static Pong* default_instance_;
};
// -------------------------------------------------------------------

class PingOrPong : public ::google::protobuf::Message {
 public:
  PingOrPong();
  virtual ~PingOrPong();

  PingOrPong(const PingOrPong& from);

  inline PingOrPong& operator=(const PingOrPong& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PingOrPong& default_instance();

  void Swap(PingOrPong* other);

  // implements Message ----------------------------------------------

  PingOrPong* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PingOrPong& from);
  void MergeFrom(const PingOrPong& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .org.libcppa.Ping ping = 1;
  inline bool has_ping() const;
  inline void clear_ping();
  static const int kPingFieldNumber = 1;
  inline const ::org::libcppa::Ping& ping() const;
  inline ::org::libcppa::Ping* mutable_ping();
  inline ::org::libcppa::Ping* release_ping();
  inline void set_allocated_ping(::org::libcppa::Ping* ping);

  // optional .org.libcppa.Pong pong = 2;
  inline bool has_pong() const;
  inline void clear_pong();
  static const int kPongFieldNumber = 2;
  inline const ::org::libcppa::Pong& pong() const;
  inline ::org::libcppa::Pong* mutable_pong();
  inline ::org::libcppa::Pong* release_pong();
  inline void set_allocated_pong(::org::libcppa::Pong* pong);

  // @@protoc_insertion_point(class_scope:org.libcppa.PingOrPong)
 private:
  inline void set_has_ping();
  inline void clear_has_ping();
  inline void set_has_pong();
  inline void clear_has_pong();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::org::libcppa::Ping* ping_;
  ::org::libcppa::Pong* pong_;
  friend void  protobuf_AddDesc_pingpong_2eproto();
  friend void protobuf_AssignDesc_pingpong_2eproto();
  friend void protobuf_ShutdownFile_pingpong_2eproto();

  void InitAsDefaultInstance();
  static PingOrPong* default_instance_;
};
// ===================================================================


// ===================================================================

// Ping

// required int32 id = 1;
inline bool Ping::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ping::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ping::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ping::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Ping::id() const {
  // @@protoc_insertion_point(field_get:org.libcppa.Ping.id)
  return id_;
}
inline void Ping::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:org.libcppa.Ping.id)
}

// -------------------------------------------------------------------

// Pong

// required int32 id = 1;
inline bool Pong::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pong::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pong::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pong::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Pong::id() const {
  // @@protoc_insertion_point(field_get:org.libcppa.Pong.id)
  return id_;
}
inline void Pong::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:org.libcppa.Pong.id)
}

// -------------------------------------------------------------------

// PingOrPong

// optional .org.libcppa.Ping ping = 1;
inline bool PingOrPong::has_ping() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PingOrPong::set_has_ping() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PingOrPong::clear_has_ping() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PingOrPong::clear_ping() {
  if (ping_ != NULL) ping_->::org::libcppa::Ping::Clear();
  clear_has_ping();
}
inline const ::org::libcppa::Ping& PingOrPong::ping() const {
  // @@protoc_insertion_point(field_get:org.libcppa.PingOrPong.ping)
  return ping_ != NULL ? *ping_ : *default_instance_->ping_;
}
inline ::org::libcppa::Ping* PingOrPong::mutable_ping() {
  set_has_ping();
  if (ping_ == NULL) ping_ = new ::org::libcppa::Ping;
  // @@protoc_insertion_point(field_mutable:org.libcppa.PingOrPong.ping)
  return ping_;
}
inline ::org::libcppa::Ping* PingOrPong::release_ping() {
  clear_has_ping();
  ::org::libcppa::Ping* temp = ping_;
  ping_ = NULL;
  return temp;
}
inline void PingOrPong::set_allocated_ping(::org::libcppa::Ping* ping) {
  delete ping_;
  ping_ = ping;
  if (ping) {
    set_has_ping();
  } else {
    clear_has_ping();
  }
  // @@protoc_insertion_point(field_set_allocated:org.libcppa.PingOrPong.ping)
}

// optional .org.libcppa.Pong pong = 2;
inline bool PingOrPong::has_pong() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PingOrPong::set_has_pong() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PingOrPong::clear_has_pong() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PingOrPong::clear_pong() {
  if (pong_ != NULL) pong_->::org::libcppa::Pong::Clear();
  clear_has_pong();
}
inline const ::org::libcppa::Pong& PingOrPong::pong() const {
  // @@protoc_insertion_point(field_get:org.libcppa.PingOrPong.pong)
  return pong_ != NULL ? *pong_ : *default_instance_->pong_;
}
inline ::org::libcppa::Pong* PingOrPong::mutable_pong() {
  set_has_pong();
  if (pong_ == NULL) pong_ = new ::org::libcppa::Pong;
  // @@protoc_insertion_point(field_mutable:org.libcppa.PingOrPong.pong)
  return pong_;
}
inline ::org::libcppa::Pong* PingOrPong::release_pong() {
  clear_has_pong();
  ::org::libcppa::Pong* temp = pong_;
  pong_ = NULL;
  return temp;
}
inline void PingOrPong::set_allocated_pong(::org::libcppa::Pong* pong) {
  delete pong_;
  pong_ = pong;
  if (pong) {
    set_has_pong();
  } else {
    clear_has_pong();
  }
  // @@protoc_insertion_point(field_set_allocated:org.libcppa.PingOrPong.pong)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace libcppa
}  // namespace org

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pingpong_2eproto__INCLUDED
