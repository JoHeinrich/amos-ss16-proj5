// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pingpong.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pingpong.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace org {
namespace libcppa {

namespace {

const ::google::protobuf::Descriptor* Ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ping_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pong_reflection_ = NULL;
const ::google::protobuf::Descriptor* PingOrPong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PingOrPong_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pingpong_2eproto() {
  protobuf_AddDesc_pingpong_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pingpong.proto");
  GOOGLE_CHECK(file != NULL);
  Ping_descriptor_ = file->message_type(0);
  static const int Ping_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, id_),
  };
  Ping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ping_descriptor_,
      Ping::default_instance_,
      Ping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ping));
  Pong_descriptor_ = file->message_type(1);
  static const int Pong_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pong, id_),
  };
  Pong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pong_descriptor_,
      Pong::default_instance_,
      Pong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pong));
  PingOrPong_descriptor_ = file->message_type(2);
  static const int PingOrPong_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingOrPong, ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingOrPong, pong_),
  };
  PingOrPong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PingOrPong_descriptor_,
      PingOrPong::default_instance_,
      PingOrPong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingOrPong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingOrPong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PingOrPong));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pingpong_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ping_descriptor_, &Ping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pong_descriptor_, &Pong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PingOrPong_descriptor_, &PingOrPong::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pingpong_2eproto() {
  delete Ping::default_instance_;
  delete Ping_reflection_;
  delete Pong::default_instance_;
  delete Pong_reflection_;
  delete PingOrPong::default_instance_;
  delete PingOrPong_reflection_;
}

void protobuf_AddDesc_pingpong_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016pingpong.proto\022\013org.libcppa\"\022\n\004Ping\022\n\n"
    "\002id\030\001 \002(\005\"\022\n\004Pong\022\n\n\002id\030\001 \002(\005\"N\n\nPingOrP"
    "ong\022\037\n\004ping\030\001 \001(\0132\021.org.libcppa.Ping\022\037\n\004"
    "pong\030\002 \001(\0132\021.org.libcppa.Pong", 149);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pingpong.proto", &protobuf_RegisterTypes);
  Ping::default_instance_ = new Ping();
  Pong::default_instance_ = new Pong();
  PingOrPong::default_instance_ = new PingOrPong();
  Ping::default_instance_->InitAsDefaultInstance();
  Pong::default_instance_->InitAsDefaultInstance();
  PingOrPong::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pingpong_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pingpong_2eproto {
  StaticDescriptorInitializer_pingpong_2eproto() {
    protobuf_AddDesc_pingpong_2eproto();
  }
} static_descriptor_initializer_pingpong_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Ping::kIdFieldNumber;
#endif  // !_MSC_VER

Ping::Ping()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.libcppa.Ping)
}

void Ping::InitAsDefaultInstance() {
}

Ping::Ping(const Ping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.libcppa.Ping)
}

void Ping::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ping::~Ping() {
  // @@protoc_insertion_point(destructor:org.libcppa.Ping)
  SharedDtor();
}

void Ping::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ping_descriptor_;
}

const Ping& Ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pingpong_2eproto();
  return *default_instance_;
}

Ping* Ping::default_instance_ = NULL;

Ping* Ping::New() const {
  return new Ping;
}

void Ping::Clear() {
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.libcppa.Ping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.libcppa.Ping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.libcppa.Ping)
  return false;
#undef DO_
}

void Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.libcppa.Ping)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.libcppa.Ping)
}

::google::protobuf::uint8* Ping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.libcppa.Ping)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.libcppa.Ping)
  return target;
}

int Ping::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ping::MergeFrom(const Ping& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ping::CopyFrom(const Ping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Ping::Swap(Ping* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ping_descriptor_;
  metadata.reflection = Ping_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pong::kIdFieldNumber;
#endif  // !_MSC_VER

Pong::Pong()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.libcppa.Pong)
}

void Pong::InitAsDefaultInstance() {
}

Pong::Pong(const Pong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.libcppa.Pong)
}

void Pong::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pong::~Pong() {
  // @@protoc_insertion_point(destructor:org.libcppa.Pong)
  SharedDtor();
}

void Pong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pong_descriptor_;
}

const Pong& Pong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pingpong_2eproto();
  return *default_instance_;
}

Pong* Pong::default_instance_ = NULL;

Pong* Pong::New() const {
  return new Pong;
}

void Pong::Clear() {
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.libcppa.Pong)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.libcppa.Pong)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.libcppa.Pong)
  return false;
#undef DO_
}

void Pong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.libcppa.Pong)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.libcppa.Pong)
}

::google::protobuf::uint8* Pong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.libcppa.Pong)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.libcppa.Pong)
  return target;
}

int Pong::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pong::MergeFrom(const Pong& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pong::CopyFrom(const Pong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pong::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Pong::Swap(Pong* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pong_descriptor_;
  metadata.reflection = Pong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PingOrPong::kPingFieldNumber;
const int PingOrPong::kPongFieldNumber;
#endif  // !_MSC_VER

PingOrPong::PingOrPong()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.libcppa.PingOrPong)
}

void PingOrPong::InitAsDefaultInstance() {
  ping_ = const_cast< ::org::libcppa::Ping*>(&::org::libcppa::Ping::default_instance());
  pong_ = const_cast< ::org::libcppa::Pong*>(&::org::libcppa::Pong::default_instance());
}

PingOrPong::PingOrPong(const PingOrPong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.libcppa.PingOrPong)
}

void PingOrPong::SharedCtor() {
  _cached_size_ = 0;
  ping_ = NULL;
  pong_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PingOrPong::~PingOrPong() {
  // @@protoc_insertion_point(destructor:org.libcppa.PingOrPong)
  SharedDtor();
}

void PingOrPong::SharedDtor() {
  if (this != default_instance_) {
    delete ping_;
    delete pong_;
  }
}

void PingOrPong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingOrPong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingOrPong_descriptor_;
}

const PingOrPong& PingOrPong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pingpong_2eproto();
  return *default_instance_;
}

PingOrPong* PingOrPong::default_instance_ = NULL;

PingOrPong* PingOrPong::New() const {
  return new PingOrPong;
}

void PingOrPong::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_ping()) {
      if (ping_ != NULL) ping_->::org::libcppa::Ping::Clear();
    }
    if (has_pong()) {
      if (pong_ != NULL) pong_->::org::libcppa::Pong::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PingOrPong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.libcppa.PingOrPong)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .org.libcppa.Ping ping = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pong;
        break;
      }

      // optional .org.libcppa.Pong pong = 2;
      case 2: {
        if (tag == 18) {
         parse_pong:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pong()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.libcppa.PingOrPong)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.libcppa.PingOrPong)
  return false;
#undef DO_
}

void PingOrPong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.libcppa.PingOrPong)
  // optional .org.libcppa.Ping ping = 1;
  if (has_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ping(), output);
  }

  // optional .org.libcppa.Pong pong = 2;
  if (has_pong()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pong(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.libcppa.PingOrPong)
}

::google::protobuf::uint8* PingOrPong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.libcppa.PingOrPong)
  // optional .org.libcppa.Ping ping = 1;
  if (has_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ping(), target);
  }

  // optional .org.libcppa.Pong pong = 2;
  if (has_pong()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pong(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.libcppa.PingOrPong)
  return target;
}

int PingOrPong::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .org.libcppa.Ping ping = 1;
    if (has_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ping());
    }

    // optional .org.libcppa.Pong pong = 2;
    if (has_pong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pong());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingOrPong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PingOrPong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PingOrPong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PingOrPong::MergeFrom(const PingOrPong& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ping()) {
      mutable_ping()->::org::libcppa::Ping::MergeFrom(from.ping());
    }
    if (from.has_pong()) {
      mutable_pong()->::org::libcppa::Pong::MergeFrom(from.pong());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PingOrPong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingOrPong::CopyFrom(const PingOrPong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingOrPong::IsInitialized() const {

  if (has_ping()) {
    if (!this->ping().IsInitialized()) return false;
  }
  if (has_pong()) {
    if (!this->pong().IsInitialized()) return false;
  }
  return true;
}

void PingOrPong::Swap(PingOrPong* other) {
  if (other != this) {
    std::swap(ping_, other->ping_);
    std::swap(pong_, other->pong_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PingOrPong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PingOrPong_descriptor_;
  metadata.reflection = PingOrPong_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace libcppa
}  // namespace org

// @@protoc_insertion_point(global_scope)
