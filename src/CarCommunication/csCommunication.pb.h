// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csCommunication.proto

#ifndef PROTOBUF_csCommunication_2eproto__INCLUDED
#define PROTOBUF_csCommunication_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace csCommunication {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_csCommunication_2eproto();
void protobuf_AssignDesc_csCommunication_2eproto();
void protobuf_ShutdownFile_csCommunication_2eproto();

class Warning;

// ===================================================================

class Warning : public ::google::protobuf::Message {
 public:
  Warning();
  virtual ~Warning();

  Warning(const Warning& from);

  inline Warning& operator=(const Warning& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Warning& default_instance();

  void Swap(Warning* other);

  // implements Message ----------------------------------------------

  Warning* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Warning& from);
  void MergeFrom(const Warning& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string mess = 1;
  inline bool has_mess() const;
  inline void clear_mess();
  static const int kMessFieldNumber = 1;
  inline const ::std::string& mess() const;
  inline void set_mess(const ::std::string& value);
  inline void set_mess(const char* value);
  inline void set_mess(const char* value, size_t size);
  inline ::std::string* mutable_mess();
  inline ::std::string* release_mess();
  inline void set_allocated_mess(::std::string* mess);

  // @@protoc_insertion_point(class_scope:csCommunication.Warning)
 private:
  inline void set_has_mess();
  inline void clear_has_mess();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* mess_;
  friend void  protobuf_AddDesc_csCommunication_2eproto();
  friend void protobuf_AssignDesc_csCommunication_2eproto();
  friend void protobuf_ShutdownFile_csCommunication_2eproto();

  void InitAsDefaultInstance();
  static Warning* default_instance_;
};
// ===================================================================


// ===================================================================

// Warning

// required string mess = 1;
inline bool Warning::has_mess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Warning::set_has_mess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Warning::clear_has_mess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Warning::clear_mess() {
  if (mess_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mess_->clear();
  }
  clear_has_mess();
}
inline const ::std::string& Warning::mess() const {
  // @@protoc_insertion_point(field_get:csCommunication.Warning.mess)
  return *mess_;
}
inline void Warning::set_mess(const ::std::string& value) {
  set_has_mess();
  if (mess_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mess_ = new ::std::string;
  }
  mess_->assign(value);
  // @@protoc_insertion_point(field_set:csCommunication.Warning.mess)
}
inline void Warning::set_mess(const char* value) {
  set_has_mess();
  if (mess_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mess_ = new ::std::string;
  }
  mess_->assign(value);
  // @@protoc_insertion_point(field_set_char:csCommunication.Warning.mess)
}
inline void Warning::set_mess(const char* value, size_t size) {
  set_has_mess();
  if (mess_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mess_ = new ::std::string;
  }
  mess_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:csCommunication.Warning.mess)
}
inline ::std::string* Warning::mutable_mess() {
  set_has_mess();
  if (mess_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mess_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:csCommunication.Warning.mess)
  return mess_;
}
inline ::std::string* Warning::release_mess() {
  clear_has_mess();
  if (mess_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mess_;
    mess_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Warning::set_allocated_mess(::std::string* mess) {
  if (mess_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mess_;
  }
  if (mess) {
    set_has_mess();
    mess_ = mess;
  } else {
    clear_has_mess();
    mess_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:csCommunication.Warning.mess)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace csCommunication

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_csCommunication_2eproto__INCLUDED
