// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace org {
namespace libcppa {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class warning;
class ack;
class WarnOrAck;

// ===================================================================

class warning : public ::google::protobuf::Message {
 public:
  warning();
  virtual ~warning();

  warning(const warning& from);

  inline warning& operator=(const warning& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const warning& default_instance();

  void Swap(warning* other);

  // implements Message ----------------------------------------------

  warning* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const warning& from);
  void MergeFrom(const warning& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:org.libcppa.warning)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static warning* default_instance_;
};
// -------------------------------------------------------------------

class ack : public ::google::protobuf::Message {
 public:
  ack();
  virtual ~ack();

  ack(const ack& from);

  inline ack& operator=(const ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ack& default_instance();

  void Swap(ack* other);

  // implements Message ----------------------------------------------

  ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ack& from);
  void MergeFrom(const ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:org.libcppa.ack)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static ack* default_instance_;
};
// -------------------------------------------------------------------

class WarnOrAck : public ::google::protobuf::Message {
 public:
  WarnOrAck();
  virtual ~WarnOrAck();

  WarnOrAck(const WarnOrAck& from);

  inline WarnOrAck& operator=(const WarnOrAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WarnOrAck& default_instance();

  void Swap(WarnOrAck* other);

  // implements Message ----------------------------------------------

  WarnOrAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WarnOrAck& from);
  void MergeFrom(const WarnOrAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .org.libcppa.warning warn = 1;
  inline bool has_warn() const;
  inline void clear_warn();
  static const int kWarnFieldNumber = 1;
  inline const ::org::libcppa::warning& warn() const;
  inline ::org::libcppa::warning* mutable_warn();
  inline ::org::libcppa::warning* release_warn();
  inline void set_allocated_warn(::org::libcppa::warning* warn);

  // optional .org.libcppa.ack ack = 2;
  inline bool has_ack() const;
  inline void clear_ack();
  static const int kAckFieldNumber = 2;
  inline const ::org::libcppa::ack& ack() const;
  inline ::org::libcppa::ack* mutable_ack();
  inline ::org::libcppa::ack* release_ack();
  inline void set_allocated_ack(::org::libcppa::ack* ack);

  // @@protoc_insertion_point(class_scope:org.libcppa.WarnOrAck)
 private:
  inline void set_has_warn();
  inline void clear_has_warn();
  inline void set_has_ack();
  inline void clear_has_ack();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::org::libcppa::warning* warn_;
  ::org::libcppa::ack* ack_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static WarnOrAck* default_instance_;
};
// ===================================================================


// ===================================================================

// warning

// required int32 id = 1;
inline bool warning::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void warning::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void warning::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void warning::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 warning::id() const {
  // @@protoc_insertion_point(field_get:org.libcppa.warning.id)
  return id_;
}
inline void warning::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:org.libcppa.warning.id)
}

// required int32 type = 2;
inline bool warning::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void warning::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void warning::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void warning::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 warning::type() const {
  // @@protoc_insertion_point(field_get:org.libcppa.warning.type)
  return type_;
}
inline void warning::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:org.libcppa.warning.type)
}

// -------------------------------------------------------------------

// ack

// required int32 id = 1;
inline bool ack::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ack::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ack::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ack::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ack::id() const {
  // @@protoc_insertion_point(field_get:org.libcppa.ack.id)
  return id_;
}
inline void ack::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:org.libcppa.ack.id)
}

// required int32 type = 2;
inline bool ack::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ack::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ack::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ack::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ack::type() const {
  // @@protoc_insertion_point(field_get:org.libcppa.ack.type)
  return type_;
}
inline void ack::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:org.libcppa.ack.type)
}

// -------------------------------------------------------------------

// WarnOrAck

// optional .org.libcppa.warning warn = 1;
inline bool WarnOrAck::has_warn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WarnOrAck::set_has_warn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WarnOrAck::clear_has_warn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WarnOrAck::clear_warn() {
  if (warn_ != NULL) warn_->::org::libcppa::warning::Clear();
  clear_has_warn();
}
inline const ::org::libcppa::warning& WarnOrAck::warn() const {
  // @@protoc_insertion_point(field_get:org.libcppa.WarnOrAck.warn)
  return warn_ != NULL ? *warn_ : *default_instance_->warn_;
}
inline ::org::libcppa::warning* WarnOrAck::mutable_warn() {
  set_has_warn();
  if (warn_ == NULL) warn_ = new ::org::libcppa::warning;
  // @@protoc_insertion_point(field_mutable:org.libcppa.WarnOrAck.warn)
  return warn_;
}
inline ::org::libcppa::warning* WarnOrAck::release_warn() {
  clear_has_warn();
  ::org::libcppa::warning* temp = warn_;
  warn_ = NULL;
  return temp;
}
inline void WarnOrAck::set_allocated_warn(::org::libcppa::warning* warn) {
  delete warn_;
  warn_ = warn;
  if (warn) {
    set_has_warn();
  } else {
    clear_has_warn();
  }
  // @@protoc_insertion_point(field_set_allocated:org.libcppa.WarnOrAck.warn)
}

// optional .org.libcppa.ack ack = 2;
inline bool WarnOrAck::has_ack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WarnOrAck::set_has_ack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WarnOrAck::clear_has_ack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WarnOrAck::clear_ack() {
  if (ack_ != NULL) ack_->::org::libcppa::ack::Clear();
  clear_has_ack();
}
inline const ::org::libcppa::ack& WarnOrAck::ack() const {
  // @@protoc_insertion_point(field_get:org.libcppa.WarnOrAck.ack)
  return ack_ != NULL ? *ack_ : *default_instance_->ack_;
}
inline ::org::libcppa::ack* WarnOrAck::mutable_ack() {
  set_has_ack();
  if (ack_ == NULL) ack_ = new ::org::libcppa::ack;
  // @@protoc_insertion_point(field_mutable:org.libcppa.WarnOrAck.ack)
  return ack_;
}
inline ::org::libcppa::ack* WarnOrAck::release_ack() {
  clear_has_ack();
  ::org::libcppa::ack* temp = ack_;
  ack_ = NULL;
  return temp;
}
inline void WarnOrAck::set_allocated_ack(::org::libcppa::ack* ack) {
  delete ack_;
  ack_ = ack;
  if (ack) {
    set_has_ack();
  } else {
    clear_has_ack();
  }
  // @@protoc_insertion_point(field_set_allocated:org.libcppa.WarnOrAck.ack)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace libcppa
}  // namespace org

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
