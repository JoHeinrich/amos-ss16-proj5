// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgCameraImage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgCameraImage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {
namespace Grid {

namespace {

const ::google::protobuf::Descriptor* MsgCameraImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCameraImage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgCameraImage_2eproto() {
  protobuf_AddDesc_MsgCameraImage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgCameraImage.proto");
  GOOGLE_CHECK(file != NULL);
  MsgCameraImage_descriptor_ = file->message_type(0);
  static const int MsgCameraImage_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCameraImage, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCameraImage, m_imagecounter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCameraImage, m_imagewidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCameraImage, m_imageheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCameraImage, m_imageshiftu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCameraImage, m_imageshiftv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCameraImage, m_oimagewidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCameraImage, m_oimageheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCameraImage, m_imagersizeu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCameraImage, m_imagersizev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCameraImage, m_oimagepattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCameraImage, m_imagecompressed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCameraImage, m_imagecompressiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCameraImage, m_imagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCameraImage, m_byteperpixel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCameraImage, m_bitperpixel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCameraImage, m_imagepayload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCameraImage, mbmpimage_),
  };
  MsgCameraImage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCameraImage_descriptor_,
      MsgCameraImage::default_instance_,
      MsgCameraImage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCameraImage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCameraImage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCameraImage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgCameraImage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCameraImage_descriptor_, &MsgCameraImage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgCameraImage_2eproto() {
  delete MsgCameraImage::default_instance_;
  delete MsgCameraImage_reflection_;
}

void protobuf_AddDesc_MsgCameraImage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_header_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024MsgCameraImage.proto\022\007pb.Grid\032\014header."
    "proto\"\204\004\n\016MsgCameraImage\022\032\n\006header\030\001 \001(\013"
    "2\n.pb.Header\022\031\n\016m_ImageCounter\030\024 \001(\r:\0010\022"
    "\032\n\014m_ImageWidth\030\036 \001(\021:\0041176\022\032\n\rm_ImageHe"
    "ight\030( \001(\021:\003640\022\030\n\rm_ImageShiftU\0302 \001(\021:\001"
    "0\022\030\n\rm_ImageShiftV\030< \001(\021:\0010\022\033\n\rm_OImageW"
    "idth\030F \001(\021:\0041176\022\033\n\016m_OImageHeight\030P \001(\021"
    ":\003640\022\033\n\rm_ImagerSizeU\030Z \001(\021:\0041280\022\032\n\rm_"
    "ImagerSizeV\030d \001(\021:\003960\022\032\n\017m_OImagePatter"
    "n\030n \001(\r:\0013\022\037\n\021m_ImageCompressed\030x \001(\010:\004t"
    "rue\022\"\n\026m_ImageCompressionType\030\202\001 \001(\r:\0012\022"
    "\027\n\013m_ImageType\030\214\001 \001(\r:\0013\022\032\n\016m_BytePerPix"
    "el\030\226\001 \001(\r:\0011\022\031\n\rm_BitPerPixel\030\240\001 \001(\r:\0018\022"
    "\027\n\016m_ImagePayload\030\252\001 \001(\014\022\022\n\tmBmpImage\030\264\001"
    " \001(\014", 564);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgCameraImage.proto", &protobuf_RegisterTypes);
  MsgCameraImage::default_instance_ = new MsgCameraImage();
  MsgCameraImage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgCameraImage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgCameraImage_2eproto {
  StaticDescriptorInitializer_MsgCameraImage_2eproto() {
    protobuf_AddDesc_MsgCameraImage_2eproto();
  }
} static_descriptor_initializer_MsgCameraImage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MsgCameraImage::kHeaderFieldNumber;
const int MsgCameraImage::kMImageCounterFieldNumber;
const int MsgCameraImage::kMImageWidthFieldNumber;
const int MsgCameraImage::kMImageHeightFieldNumber;
const int MsgCameraImage::kMImageShiftUFieldNumber;
const int MsgCameraImage::kMImageShiftVFieldNumber;
const int MsgCameraImage::kMOImageWidthFieldNumber;
const int MsgCameraImage::kMOImageHeightFieldNumber;
const int MsgCameraImage::kMImagerSizeUFieldNumber;
const int MsgCameraImage::kMImagerSizeVFieldNumber;
const int MsgCameraImage::kMOImagePatternFieldNumber;
const int MsgCameraImage::kMImageCompressedFieldNumber;
const int MsgCameraImage::kMImageCompressionTypeFieldNumber;
const int MsgCameraImage::kMImageTypeFieldNumber;
const int MsgCameraImage::kMBytePerPixelFieldNumber;
const int MsgCameraImage::kMBitPerPixelFieldNumber;
const int MsgCameraImage::kMImagePayloadFieldNumber;
const int MsgCameraImage::kMBmpImageFieldNumber;
#endif  // !_MSC_VER

MsgCameraImage::MsgCameraImage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Grid.MsgCameraImage)
}

void MsgCameraImage::InitAsDefaultInstance() {
  header_ = const_cast< ::pb::Header*>(&::pb::Header::default_instance());
}

MsgCameraImage::MsgCameraImage(const MsgCameraImage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Grid.MsgCameraImage)
}

void MsgCameraImage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  m_imagecounter_ = 0u;
  m_imagewidth_ = 1176;
  m_imageheight_ = 640;
  m_imageshiftu_ = 0;
  m_imageshiftv_ = 0;
  m_oimagewidth_ = 1176;
  m_oimageheight_ = 640;
  m_imagersizeu_ = 1280;
  m_imagersizev_ = 960;
  m_oimagepattern_ = 3u;
  m_imagecompressed_ = true;
  m_imagecompressiontype_ = 2u;
  m_imagetype_ = 3u;
  m_byteperpixel_ = 1u;
  m_bitperpixel_ = 8u;
  m_imagepayload_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mbmpimage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCameraImage::~MsgCameraImage() {
  // @@protoc_insertion_point(destructor:pb.Grid.MsgCameraImage)
  SharedDtor();
}

void MsgCameraImage::SharedDtor() {
  if (m_imagepayload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete m_imagepayload_;
  }
  if (mbmpimage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mbmpimage_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void MsgCameraImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCameraImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCameraImage_descriptor_;
}

const MsgCameraImage& MsgCameraImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgCameraImage_2eproto();
  return *default_instance_;
}

MsgCameraImage* MsgCameraImage::default_instance_ = NULL;

MsgCameraImage* MsgCameraImage::New() const {
  return new MsgCameraImage;
}

void MsgCameraImage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgCameraImage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(m_imageshiftu_, m_imageshiftv_);
    if (has_header()) {
      if (header_ != NULL) header_->::pb::Header::Clear();
    }
    m_imagecounter_ = 0u;
    m_imagewidth_ = 1176;
    m_imageheight_ = 640;
    m_oimagewidth_ = 1176;
    m_oimageheight_ = 640;
  }
  if (_has_bits_[8 / 32] & 65280) {
    m_imagersizeu_ = 1280;
    m_imagersizev_ = 960;
    m_oimagepattern_ = 3u;
    m_imagecompressed_ = true;
    m_imagecompressiontype_ = 2u;
    m_imagetype_ = 3u;
    m_byteperpixel_ = 1u;
    m_bitperpixel_ = 8u;
  }
  if (_has_bits_[16 / 32] & 196608) {
    if (has_m_imagepayload()) {
      if (m_imagepayload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        m_imagepayload_->clear();
      }
    }
    if (has_mbmpimage()) {
      if (mbmpimage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mbmpimage_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCameraImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Grid.MsgCameraImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_m_ImageCounter;
        break;
      }

      // optional uint32 m_ImageCounter = 20 [default = 0];
      case 20: {
        if (tag == 160) {
         parse_m_ImageCounter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_imagecounter_)));
          set_has_m_imagecounter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_m_ImageWidth;
        break;
      }

      // optional sint32 m_ImageWidth = 30 [default = 1176];
      case 30: {
        if (tag == 240) {
         parse_m_ImageWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_imagewidth_)));
          set_has_m_imagewidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_m_ImageHeight;
        break;
      }

      // optional sint32 m_ImageHeight = 40 [default = 640];
      case 40: {
        if (tag == 320) {
         parse_m_ImageHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_imageheight_)));
          set_has_m_imageheight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_m_ImageShiftU;
        break;
      }

      // optional sint32 m_ImageShiftU = 50 [default = 0];
      case 50: {
        if (tag == 400) {
         parse_m_ImageShiftU:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_imageshiftu_)));
          set_has_m_imageshiftu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_m_ImageShiftV;
        break;
      }

      // optional sint32 m_ImageShiftV = 60 [default = 0];
      case 60: {
        if (tag == 480) {
         parse_m_ImageShiftV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_imageshiftv_)));
          set_has_m_imageshiftv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(560)) goto parse_m_OImageWidth;
        break;
      }

      // optional sint32 m_OImageWidth = 70 [default = 1176];
      case 70: {
        if (tag == 560) {
         parse_m_OImageWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_oimagewidth_)));
          set_has_m_oimagewidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(640)) goto parse_m_OImageHeight;
        break;
      }

      // optional sint32 m_OImageHeight = 80 [default = 640];
      case 80: {
        if (tag == 640) {
         parse_m_OImageHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_oimageheight_)));
          set_has_m_oimageheight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(720)) goto parse_m_ImagerSizeU;
        break;
      }

      // optional sint32 m_ImagerSizeU = 90 [default = 1280];
      case 90: {
        if (tag == 720) {
         parse_m_ImagerSizeU:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_imagersizeu_)));
          set_has_m_imagersizeu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(800)) goto parse_m_ImagerSizeV;
        break;
      }

      // optional sint32 m_ImagerSizeV = 100 [default = 960];
      case 100: {
        if (tag == 800) {
         parse_m_ImagerSizeV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_imagersizev_)));
          set_has_m_imagersizev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(880)) goto parse_m_OImagePattern;
        break;
      }

      // optional uint32 m_OImagePattern = 110 [default = 3];
      case 110: {
        if (tag == 880) {
         parse_m_OImagePattern:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_oimagepattern_)));
          set_has_m_oimagepattern();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(960)) goto parse_m_ImageCompressed;
        break;
      }

      // optional bool m_ImageCompressed = 120 [default = true];
      case 120: {
        if (tag == 960) {
         parse_m_ImageCompressed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_imagecompressed_)));
          set_has_m_imagecompressed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1040)) goto parse_m_ImageCompressionType;
        break;
      }

      // optional uint32 m_ImageCompressionType = 130 [default = 2];
      case 130: {
        if (tag == 1040) {
         parse_m_ImageCompressionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_imagecompressiontype_)));
          set_has_m_imagecompressiontype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1120)) goto parse_m_ImageType;
        break;
      }

      // optional uint32 m_ImageType = 140 [default = 3];
      case 140: {
        if (tag == 1120) {
         parse_m_ImageType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_imagetype_)));
          set_has_m_imagetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1200)) goto parse_m_BytePerPixel;
        break;
      }

      // optional uint32 m_BytePerPixel = 150 [default = 1];
      case 150: {
        if (tag == 1200) {
         parse_m_BytePerPixel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_byteperpixel_)));
          set_has_m_byteperpixel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1280)) goto parse_m_BitPerPixel;
        break;
      }

      // optional uint32 m_BitPerPixel = 160 [default = 8];
      case 160: {
        if (tag == 1280) {
         parse_m_BitPerPixel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_bitperpixel_)));
          set_has_m_bitperpixel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1362)) goto parse_m_ImagePayload;
        break;
      }

      // optional bytes m_ImagePayload = 170;
      case 170: {
        if (tag == 1362) {
         parse_m_ImagePayload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_m_imagepayload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1442)) goto parse_mBmpImage;
        break;
      }

      // optional bytes mBmpImage = 180;
      case 180: {
        if (tag == 1442) {
         parse_mBmpImage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mbmpimage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Grid.MsgCameraImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Grid.MsgCameraImage)
  return false;
#undef DO_
}

void MsgCameraImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Grid.MsgCameraImage)
  // optional .pb.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional uint32 m_ImageCounter = 20 [default = 0];
  if (has_m_imagecounter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->m_imagecounter(), output);
  }

  // optional sint32 m_ImageWidth = 30 [default = 1176];
  if (has_m_imagewidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(30, this->m_imagewidth(), output);
  }

  // optional sint32 m_ImageHeight = 40 [default = 640];
  if (has_m_imageheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(40, this->m_imageheight(), output);
  }

  // optional sint32 m_ImageShiftU = 50 [default = 0];
  if (has_m_imageshiftu()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(50, this->m_imageshiftu(), output);
  }

  // optional sint32 m_ImageShiftV = 60 [default = 0];
  if (has_m_imageshiftv()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(60, this->m_imageshiftv(), output);
  }

  // optional sint32 m_OImageWidth = 70 [default = 1176];
  if (has_m_oimagewidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(70, this->m_oimagewidth(), output);
  }

  // optional sint32 m_OImageHeight = 80 [default = 640];
  if (has_m_oimageheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(80, this->m_oimageheight(), output);
  }

  // optional sint32 m_ImagerSizeU = 90 [default = 1280];
  if (has_m_imagersizeu()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(90, this->m_imagersizeu(), output);
  }

  // optional sint32 m_ImagerSizeV = 100 [default = 960];
  if (has_m_imagersizev()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(100, this->m_imagersizev(), output);
  }

  // optional uint32 m_OImagePattern = 110 [default = 3];
  if (has_m_oimagepattern()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(110, this->m_oimagepattern(), output);
  }

  // optional bool m_ImageCompressed = 120 [default = true];
  if (has_m_imagecompressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(120, this->m_imagecompressed(), output);
  }

  // optional uint32 m_ImageCompressionType = 130 [default = 2];
  if (has_m_imagecompressiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(130, this->m_imagecompressiontype(), output);
  }

  // optional uint32 m_ImageType = 140 [default = 3];
  if (has_m_imagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(140, this->m_imagetype(), output);
  }

  // optional uint32 m_BytePerPixel = 150 [default = 1];
  if (has_m_byteperpixel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(150, this->m_byteperpixel(), output);
  }

  // optional uint32 m_BitPerPixel = 160 [default = 8];
  if (has_m_bitperpixel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(160, this->m_bitperpixel(), output);
  }

  // optional bytes m_ImagePayload = 170;
  if (has_m_imagepayload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      170, this->m_imagepayload(), output);
  }

  // optional bytes mBmpImage = 180;
  if (has_mbmpimage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      180, this->mbmpimage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Grid.MsgCameraImage)
}

::google::protobuf::uint8* MsgCameraImage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Grid.MsgCameraImage)
  // optional .pb.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional uint32 m_ImageCounter = 20 [default = 0];
  if (has_m_imagecounter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->m_imagecounter(), target);
  }

  // optional sint32 m_ImageWidth = 30 [default = 1176];
  if (has_m_imagewidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(30, this->m_imagewidth(), target);
  }

  // optional sint32 m_ImageHeight = 40 [default = 640];
  if (has_m_imageheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(40, this->m_imageheight(), target);
  }

  // optional sint32 m_ImageShiftU = 50 [default = 0];
  if (has_m_imageshiftu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(50, this->m_imageshiftu(), target);
  }

  // optional sint32 m_ImageShiftV = 60 [default = 0];
  if (has_m_imageshiftv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(60, this->m_imageshiftv(), target);
  }

  // optional sint32 m_OImageWidth = 70 [default = 1176];
  if (has_m_oimagewidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(70, this->m_oimagewidth(), target);
  }

  // optional sint32 m_OImageHeight = 80 [default = 640];
  if (has_m_oimageheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(80, this->m_oimageheight(), target);
  }

  // optional sint32 m_ImagerSizeU = 90 [default = 1280];
  if (has_m_imagersizeu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(90, this->m_imagersizeu(), target);
  }

  // optional sint32 m_ImagerSizeV = 100 [default = 960];
  if (has_m_imagersizev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(100, this->m_imagersizev(), target);
  }

  // optional uint32 m_OImagePattern = 110 [default = 3];
  if (has_m_oimagepattern()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(110, this->m_oimagepattern(), target);
  }

  // optional bool m_ImageCompressed = 120 [default = true];
  if (has_m_imagecompressed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(120, this->m_imagecompressed(), target);
  }

  // optional uint32 m_ImageCompressionType = 130 [default = 2];
  if (has_m_imagecompressiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(130, this->m_imagecompressiontype(), target);
  }

  // optional uint32 m_ImageType = 140 [default = 3];
  if (has_m_imagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(140, this->m_imagetype(), target);
  }

  // optional uint32 m_BytePerPixel = 150 [default = 1];
  if (has_m_byteperpixel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(150, this->m_byteperpixel(), target);
  }

  // optional uint32 m_BitPerPixel = 160 [default = 8];
  if (has_m_bitperpixel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(160, this->m_bitperpixel(), target);
  }

  // optional bytes m_ImagePayload = 170;
  if (has_m_imagepayload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        170, this->m_imagepayload(), target);
  }

  // optional bytes mBmpImage = 180;
  if (has_mbmpimage()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        180, this->mbmpimage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Grid.MsgCameraImage)
  return target;
}

int MsgCameraImage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional uint32 m_ImageCounter = 20 [default = 0];
    if (has_m_imagecounter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_imagecounter());
    }

    // optional sint32 m_ImageWidth = 30 [default = 1176];
    if (has_m_imagewidth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_imagewidth());
    }

    // optional sint32 m_ImageHeight = 40 [default = 640];
    if (has_m_imageheight()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_imageheight());
    }

    // optional sint32 m_ImageShiftU = 50 [default = 0];
    if (has_m_imageshiftu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_imageshiftu());
    }

    // optional sint32 m_ImageShiftV = 60 [default = 0];
    if (has_m_imageshiftv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_imageshiftv());
    }

    // optional sint32 m_OImageWidth = 70 [default = 1176];
    if (has_m_oimagewidth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_oimagewidth());
    }

    // optional sint32 m_OImageHeight = 80 [default = 640];
    if (has_m_oimageheight()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_oimageheight());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sint32 m_ImagerSizeU = 90 [default = 1280];
    if (has_m_imagersizeu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_imagersizeu());
    }

    // optional sint32 m_ImagerSizeV = 100 [default = 960];
    if (has_m_imagersizev()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_imagersizev());
    }

    // optional uint32 m_OImagePattern = 110 [default = 3];
    if (has_m_oimagepattern()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_oimagepattern());
    }

    // optional bool m_ImageCompressed = 120 [default = true];
    if (has_m_imagecompressed()) {
      total_size += 2 + 1;
    }

    // optional uint32 m_ImageCompressionType = 130 [default = 2];
    if (has_m_imagecompressiontype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_imagecompressiontype());
    }

    // optional uint32 m_ImageType = 140 [default = 3];
    if (has_m_imagetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_imagetype());
    }

    // optional uint32 m_BytePerPixel = 150 [default = 1];
    if (has_m_byteperpixel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_byteperpixel());
    }

    // optional uint32 m_BitPerPixel = 160 [default = 8];
    if (has_m_bitperpixel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_bitperpixel());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bytes m_ImagePayload = 170;
    if (has_m_imagepayload()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->m_imagepayload());
    }

    // optional bytes mBmpImage = 180;
    if (has_mbmpimage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mbmpimage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCameraImage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCameraImage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCameraImage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCameraImage::MergeFrom(const MsgCameraImage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::pb::Header::MergeFrom(from.header());
    }
    if (from.has_m_imagecounter()) {
      set_m_imagecounter(from.m_imagecounter());
    }
    if (from.has_m_imagewidth()) {
      set_m_imagewidth(from.m_imagewidth());
    }
    if (from.has_m_imageheight()) {
      set_m_imageheight(from.m_imageheight());
    }
    if (from.has_m_imageshiftu()) {
      set_m_imageshiftu(from.m_imageshiftu());
    }
    if (from.has_m_imageshiftv()) {
      set_m_imageshiftv(from.m_imageshiftv());
    }
    if (from.has_m_oimagewidth()) {
      set_m_oimagewidth(from.m_oimagewidth());
    }
    if (from.has_m_oimageheight()) {
      set_m_oimageheight(from.m_oimageheight());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_imagersizeu()) {
      set_m_imagersizeu(from.m_imagersizeu());
    }
    if (from.has_m_imagersizev()) {
      set_m_imagersizev(from.m_imagersizev());
    }
    if (from.has_m_oimagepattern()) {
      set_m_oimagepattern(from.m_oimagepattern());
    }
    if (from.has_m_imagecompressed()) {
      set_m_imagecompressed(from.m_imagecompressed());
    }
    if (from.has_m_imagecompressiontype()) {
      set_m_imagecompressiontype(from.m_imagecompressiontype());
    }
    if (from.has_m_imagetype()) {
      set_m_imagetype(from.m_imagetype());
    }
    if (from.has_m_byteperpixel()) {
      set_m_byteperpixel(from.m_byteperpixel());
    }
    if (from.has_m_bitperpixel()) {
      set_m_bitperpixel(from.m_bitperpixel());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_imagepayload()) {
      set_m_imagepayload(from.m_imagepayload());
    }
    if (from.has_mbmpimage()) {
      set_mbmpimage(from.mbmpimage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCameraImage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCameraImage::CopyFrom(const MsgCameraImage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCameraImage::IsInitialized() const {

  return true;
}

void MsgCameraImage::Swap(MsgCameraImage* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(m_imagecounter_, other->m_imagecounter_);
    std::swap(m_imagewidth_, other->m_imagewidth_);
    std::swap(m_imageheight_, other->m_imageheight_);
    std::swap(m_imageshiftu_, other->m_imageshiftu_);
    std::swap(m_imageshiftv_, other->m_imageshiftv_);
    std::swap(m_oimagewidth_, other->m_oimagewidth_);
    std::swap(m_oimageheight_, other->m_oimageheight_);
    std::swap(m_imagersizeu_, other->m_imagersizeu_);
    std::swap(m_imagersizev_, other->m_imagersizev_);
    std::swap(m_oimagepattern_, other->m_oimagepattern_);
    std::swap(m_imagecompressed_, other->m_imagecompressed_);
    std::swap(m_imagecompressiontype_, other->m_imagecompressiontype_);
    std::swap(m_imagetype_, other->m_imagetype_);
    std::swap(m_byteperpixel_, other->m_byteperpixel_);
    std::swap(m_bitperpixel_, other->m_bitperpixel_);
    std::swap(m_imagepayload_, other->m_imagepayload_);
    std::swap(mbmpimage_, other->mbmpimage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCameraImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCameraImage_descriptor_;
  metadata.reflection = MsgCameraImage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Grid
}  // namespace pb

// @@protoc_insertion_point(global_scope)
