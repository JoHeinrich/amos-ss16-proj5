// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgCameraImage.proto

#ifndef PROTOBUF_MsgCameraImage_2eproto__INCLUDED
#define PROTOBUF_MsgCameraImage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {
namespace Grid {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MsgCameraImage_2eproto();
void protobuf_AssignDesc_MsgCameraImage_2eproto();
void protobuf_ShutdownFile_MsgCameraImage_2eproto();

class MsgCameraImage;

// ===================================================================

class MsgCameraImage : public ::google::protobuf::Message {
 public:
  MsgCameraImage();
  virtual ~MsgCameraImage();

  MsgCameraImage(const MsgCameraImage& from);

  inline MsgCameraImage& operator=(const MsgCameraImage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCameraImage& default_instance();

  void Swap(MsgCameraImage* other);

  // implements Message ----------------------------------------------

  MsgCameraImage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCameraImage& from);
  void MergeFrom(const MsgCameraImage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::pb::Header& header() const;
  inline ::pb::Header* mutable_header();
  inline ::pb::Header* release_header();
  inline void set_allocated_header(::pb::Header* header);

  // optional uint32 m_ImageCounter = 20 [default = 0];
  inline bool has_m_imagecounter() const;
  inline void clear_m_imagecounter();
  static const int kMImageCounterFieldNumber = 20;
  inline ::google::protobuf::uint32 m_imagecounter() const;
  inline void set_m_imagecounter(::google::protobuf::uint32 value);

  // optional sint32 m_ImageWidth = 30 [default = 1176];
  inline bool has_m_imagewidth() const;
  inline void clear_m_imagewidth();
  static const int kMImageWidthFieldNumber = 30;
  inline ::google::protobuf::int32 m_imagewidth() const;
  inline void set_m_imagewidth(::google::protobuf::int32 value);

  // optional sint32 m_ImageHeight = 40 [default = 640];
  inline bool has_m_imageheight() const;
  inline void clear_m_imageheight();
  static const int kMImageHeightFieldNumber = 40;
  inline ::google::protobuf::int32 m_imageheight() const;
  inline void set_m_imageheight(::google::protobuf::int32 value);

  // optional sint32 m_ImageShiftU = 50 [default = 0];
  inline bool has_m_imageshiftu() const;
  inline void clear_m_imageshiftu();
  static const int kMImageShiftUFieldNumber = 50;
  inline ::google::protobuf::int32 m_imageshiftu() const;
  inline void set_m_imageshiftu(::google::protobuf::int32 value);

  // optional sint32 m_ImageShiftV = 60 [default = 0];
  inline bool has_m_imageshiftv() const;
  inline void clear_m_imageshiftv();
  static const int kMImageShiftVFieldNumber = 60;
  inline ::google::protobuf::int32 m_imageshiftv() const;
  inline void set_m_imageshiftv(::google::protobuf::int32 value);

  // optional sint32 m_OImageWidth = 70 [default = 1176];
  inline bool has_m_oimagewidth() const;
  inline void clear_m_oimagewidth();
  static const int kMOImageWidthFieldNumber = 70;
  inline ::google::protobuf::int32 m_oimagewidth() const;
  inline void set_m_oimagewidth(::google::protobuf::int32 value);

  // optional sint32 m_OImageHeight = 80 [default = 640];
  inline bool has_m_oimageheight() const;
  inline void clear_m_oimageheight();
  static const int kMOImageHeightFieldNumber = 80;
  inline ::google::protobuf::int32 m_oimageheight() const;
  inline void set_m_oimageheight(::google::protobuf::int32 value);

  // optional sint32 m_ImagerSizeU = 90 [default = 1280];
  inline bool has_m_imagersizeu() const;
  inline void clear_m_imagersizeu();
  static const int kMImagerSizeUFieldNumber = 90;
  inline ::google::protobuf::int32 m_imagersizeu() const;
  inline void set_m_imagersizeu(::google::protobuf::int32 value);

  // optional sint32 m_ImagerSizeV = 100 [default = 960];
  inline bool has_m_imagersizev() const;
  inline void clear_m_imagersizev();
  static const int kMImagerSizeVFieldNumber = 100;
  inline ::google::protobuf::int32 m_imagersizev() const;
  inline void set_m_imagersizev(::google::protobuf::int32 value);

  // optional uint32 m_OImagePattern = 110 [default = 3];
  inline bool has_m_oimagepattern() const;
  inline void clear_m_oimagepattern();
  static const int kMOImagePatternFieldNumber = 110;
  inline ::google::protobuf::uint32 m_oimagepattern() const;
  inline void set_m_oimagepattern(::google::protobuf::uint32 value);

  // optional bool m_ImageCompressed = 120 [default = true];
  inline bool has_m_imagecompressed() const;
  inline void clear_m_imagecompressed();
  static const int kMImageCompressedFieldNumber = 120;
  inline bool m_imagecompressed() const;
  inline void set_m_imagecompressed(bool value);

  // optional uint32 m_ImageCompressionType = 130 [default = 2];
  inline bool has_m_imagecompressiontype() const;
  inline void clear_m_imagecompressiontype();
  static const int kMImageCompressionTypeFieldNumber = 130;
  inline ::google::protobuf::uint32 m_imagecompressiontype() const;
  inline void set_m_imagecompressiontype(::google::protobuf::uint32 value);

  // optional uint32 m_ImageType = 140 [default = 3];
  inline bool has_m_imagetype() const;
  inline void clear_m_imagetype();
  static const int kMImageTypeFieldNumber = 140;
  inline ::google::protobuf::uint32 m_imagetype() const;
  inline void set_m_imagetype(::google::protobuf::uint32 value);

  // optional uint32 m_BytePerPixel = 150 [default = 1];
  inline bool has_m_byteperpixel() const;
  inline void clear_m_byteperpixel();
  static const int kMBytePerPixelFieldNumber = 150;
  inline ::google::protobuf::uint32 m_byteperpixel() const;
  inline void set_m_byteperpixel(::google::protobuf::uint32 value);

  // optional uint32 m_BitPerPixel = 160 [default = 8];
  inline bool has_m_bitperpixel() const;
  inline void clear_m_bitperpixel();
  static const int kMBitPerPixelFieldNumber = 160;
  inline ::google::protobuf::uint32 m_bitperpixel() const;
  inline void set_m_bitperpixel(::google::protobuf::uint32 value);

  // optional bytes m_ImagePayload = 170;
  inline bool has_m_imagepayload() const;
  inline void clear_m_imagepayload();
  static const int kMImagePayloadFieldNumber = 170;
  inline const ::std::string& m_imagepayload() const;
  inline void set_m_imagepayload(const ::std::string& value);
  inline void set_m_imagepayload(const char* value);
  inline void set_m_imagepayload(const void* value, size_t size);
  inline ::std::string* mutable_m_imagepayload();
  inline ::std::string* release_m_imagepayload();
  inline void set_allocated_m_imagepayload(::std::string* m_imagepayload);

  // optional bytes mBmpImage = 180;
  inline bool has_mbmpimage() const;
  inline void clear_mbmpimage();
  static const int kMBmpImageFieldNumber = 180;
  inline const ::std::string& mbmpimage() const;
  inline void set_mbmpimage(const ::std::string& value);
  inline void set_mbmpimage(const char* value);
  inline void set_mbmpimage(const void* value, size_t size);
  inline ::std::string* mutable_mbmpimage();
  inline ::std::string* release_mbmpimage();
  inline void set_allocated_mbmpimage(::std::string* mbmpimage);

  // @@protoc_insertion_point(class_scope:pb.Grid.MsgCameraImage)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_m_imagecounter();
  inline void clear_has_m_imagecounter();
  inline void set_has_m_imagewidth();
  inline void clear_has_m_imagewidth();
  inline void set_has_m_imageheight();
  inline void clear_has_m_imageheight();
  inline void set_has_m_imageshiftu();
  inline void clear_has_m_imageshiftu();
  inline void set_has_m_imageshiftv();
  inline void clear_has_m_imageshiftv();
  inline void set_has_m_oimagewidth();
  inline void clear_has_m_oimagewidth();
  inline void set_has_m_oimageheight();
  inline void clear_has_m_oimageheight();
  inline void set_has_m_imagersizeu();
  inline void clear_has_m_imagersizeu();
  inline void set_has_m_imagersizev();
  inline void clear_has_m_imagersizev();
  inline void set_has_m_oimagepattern();
  inline void clear_has_m_oimagepattern();
  inline void set_has_m_imagecompressed();
  inline void clear_has_m_imagecompressed();
  inline void set_has_m_imagecompressiontype();
  inline void clear_has_m_imagecompressiontype();
  inline void set_has_m_imagetype();
  inline void clear_has_m_imagetype();
  inline void set_has_m_byteperpixel();
  inline void clear_has_m_byteperpixel();
  inline void set_has_m_bitperpixel();
  inline void clear_has_m_bitperpixel();
  inline void set_has_m_imagepayload();
  inline void clear_has_m_imagepayload();
  inline void set_has_mbmpimage();
  inline void clear_has_mbmpimage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::Header* header_;
  ::google::protobuf::uint32 m_imagecounter_;
  ::google::protobuf::int32 m_imagewidth_;
  ::google::protobuf::int32 m_imageheight_;
  ::google::protobuf::int32 m_imageshiftu_;
  ::google::protobuf::int32 m_imageshiftv_;
  ::google::protobuf::int32 m_oimagewidth_;
  ::google::protobuf::int32 m_oimageheight_;
  ::google::protobuf::int32 m_imagersizeu_;
  ::google::protobuf::int32 m_imagersizev_;
  ::google::protobuf::uint32 m_oimagepattern_;
  bool m_imagecompressed_;
  ::google::protobuf::uint32 m_imagecompressiontype_;
  ::google::protobuf::uint32 m_imagetype_;
  ::google::protobuf::uint32 m_byteperpixel_;
  ::std::string* m_imagepayload_;
  ::std::string* mbmpimage_;
  ::google::protobuf::uint32 m_bitperpixel_;
  friend void  protobuf_AddDesc_MsgCameraImage_2eproto();
  friend void protobuf_AssignDesc_MsgCameraImage_2eproto();
  friend void protobuf_ShutdownFile_MsgCameraImage_2eproto();

  void InitAsDefaultInstance();
  static MsgCameraImage* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgCameraImage

// optional .pb.Header header = 1;
inline bool MsgCameraImage::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgCameraImage::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgCameraImage::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgCameraImage::clear_header() {
  if (header_ != NULL) header_->::pb::Header::Clear();
  clear_has_header();
}
inline const ::pb::Header& MsgCameraImage::header() const {
  // @@protoc_insertion_point(field_get:pb.Grid.MsgCameraImage.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::pb::Header* MsgCameraImage::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::pb::Header;
  // @@protoc_insertion_point(field_mutable:pb.Grid.MsgCameraImage.header)
  return header_;
}
inline ::pb::Header* MsgCameraImage::release_header() {
  clear_has_header();
  ::pb::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void MsgCameraImage::set_allocated_header(::pb::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Grid.MsgCameraImage.header)
}

// optional uint32 m_ImageCounter = 20 [default = 0];
inline bool MsgCameraImage::has_m_imagecounter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgCameraImage::set_has_m_imagecounter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgCameraImage::clear_has_m_imagecounter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgCameraImage::clear_m_imagecounter() {
  m_imagecounter_ = 0u;
  clear_has_m_imagecounter();
}
inline ::google::protobuf::uint32 MsgCameraImage::m_imagecounter() const {
  // @@protoc_insertion_point(field_get:pb.Grid.MsgCameraImage.m_ImageCounter)
  return m_imagecounter_;
}
inline void MsgCameraImage::set_m_imagecounter(::google::protobuf::uint32 value) {
  set_has_m_imagecounter();
  m_imagecounter_ = value;
  // @@protoc_insertion_point(field_set:pb.Grid.MsgCameraImage.m_ImageCounter)
}

// optional sint32 m_ImageWidth = 30 [default = 1176];
inline bool MsgCameraImage::has_m_imagewidth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgCameraImage::set_has_m_imagewidth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgCameraImage::clear_has_m_imagewidth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgCameraImage::clear_m_imagewidth() {
  m_imagewidth_ = 1176;
  clear_has_m_imagewidth();
}
inline ::google::protobuf::int32 MsgCameraImage::m_imagewidth() const {
  // @@protoc_insertion_point(field_get:pb.Grid.MsgCameraImage.m_ImageWidth)
  return m_imagewidth_;
}
inline void MsgCameraImage::set_m_imagewidth(::google::protobuf::int32 value) {
  set_has_m_imagewidth();
  m_imagewidth_ = value;
  // @@protoc_insertion_point(field_set:pb.Grid.MsgCameraImage.m_ImageWidth)
}

// optional sint32 m_ImageHeight = 40 [default = 640];
inline bool MsgCameraImage::has_m_imageheight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgCameraImage::set_has_m_imageheight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgCameraImage::clear_has_m_imageheight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgCameraImage::clear_m_imageheight() {
  m_imageheight_ = 640;
  clear_has_m_imageheight();
}
inline ::google::protobuf::int32 MsgCameraImage::m_imageheight() const {
  // @@protoc_insertion_point(field_get:pb.Grid.MsgCameraImage.m_ImageHeight)
  return m_imageheight_;
}
inline void MsgCameraImage::set_m_imageheight(::google::protobuf::int32 value) {
  set_has_m_imageheight();
  m_imageheight_ = value;
  // @@protoc_insertion_point(field_set:pb.Grid.MsgCameraImage.m_ImageHeight)
}

// optional sint32 m_ImageShiftU = 50 [default = 0];
inline bool MsgCameraImage::has_m_imageshiftu() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgCameraImage::set_has_m_imageshiftu() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgCameraImage::clear_has_m_imageshiftu() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgCameraImage::clear_m_imageshiftu() {
  m_imageshiftu_ = 0;
  clear_has_m_imageshiftu();
}
inline ::google::protobuf::int32 MsgCameraImage::m_imageshiftu() const {
  // @@protoc_insertion_point(field_get:pb.Grid.MsgCameraImage.m_ImageShiftU)
  return m_imageshiftu_;
}
inline void MsgCameraImage::set_m_imageshiftu(::google::protobuf::int32 value) {
  set_has_m_imageshiftu();
  m_imageshiftu_ = value;
  // @@protoc_insertion_point(field_set:pb.Grid.MsgCameraImage.m_ImageShiftU)
}

// optional sint32 m_ImageShiftV = 60 [default = 0];
inline bool MsgCameraImage::has_m_imageshiftv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgCameraImage::set_has_m_imageshiftv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgCameraImage::clear_has_m_imageshiftv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgCameraImage::clear_m_imageshiftv() {
  m_imageshiftv_ = 0;
  clear_has_m_imageshiftv();
}
inline ::google::protobuf::int32 MsgCameraImage::m_imageshiftv() const {
  // @@protoc_insertion_point(field_get:pb.Grid.MsgCameraImage.m_ImageShiftV)
  return m_imageshiftv_;
}
inline void MsgCameraImage::set_m_imageshiftv(::google::protobuf::int32 value) {
  set_has_m_imageshiftv();
  m_imageshiftv_ = value;
  // @@protoc_insertion_point(field_set:pb.Grid.MsgCameraImage.m_ImageShiftV)
}

// optional sint32 m_OImageWidth = 70 [default = 1176];
inline bool MsgCameraImage::has_m_oimagewidth() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MsgCameraImage::set_has_m_oimagewidth() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MsgCameraImage::clear_has_m_oimagewidth() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MsgCameraImage::clear_m_oimagewidth() {
  m_oimagewidth_ = 1176;
  clear_has_m_oimagewidth();
}
inline ::google::protobuf::int32 MsgCameraImage::m_oimagewidth() const {
  // @@protoc_insertion_point(field_get:pb.Grid.MsgCameraImage.m_OImageWidth)
  return m_oimagewidth_;
}
inline void MsgCameraImage::set_m_oimagewidth(::google::protobuf::int32 value) {
  set_has_m_oimagewidth();
  m_oimagewidth_ = value;
  // @@protoc_insertion_point(field_set:pb.Grid.MsgCameraImage.m_OImageWidth)
}

// optional sint32 m_OImageHeight = 80 [default = 640];
inline bool MsgCameraImage::has_m_oimageheight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MsgCameraImage::set_has_m_oimageheight() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MsgCameraImage::clear_has_m_oimageheight() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MsgCameraImage::clear_m_oimageheight() {
  m_oimageheight_ = 640;
  clear_has_m_oimageheight();
}
inline ::google::protobuf::int32 MsgCameraImage::m_oimageheight() const {
  // @@protoc_insertion_point(field_get:pb.Grid.MsgCameraImage.m_OImageHeight)
  return m_oimageheight_;
}
inline void MsgCameraImage::set_m_oimageheight(::google::protobuf::int32 value) {
  set_has_m_oimageheight();
  m_oimageheight_ = value;
  // @@protoc_insertion_point(field_set:pb.Grid.MsgCameraImage.m_OImageHeight)
}

// optional sint32 m_ImagerSizeU = 90 [default = 1280];
inline bool MsgCameraImage::has_m_imagersizeu() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MsgCameraImage::set_has_m_imagersizeu() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MsgCameraImage::clear_has_m_imagersizeu() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MsgCameraImage::clear_m_imagersizeu() {
  m_imagersizeu_ = 1280;
  clear_has_m_imagersizeu();
}
inline ::google::protobuf::int32 MsgCameraImage::m_imagersizeu() const {
  // @@protoc_insertion_point(field_get:pb.Grid.MsgCameraImage.m_ImagerSizeU)
  return m_imagersizeu_;
}
inline void MsgCameraImage::set_m_imagersizeu(::google::protobuf::int32 value) {
  set_has_m_imagersizeu();
  m_imagersizeu_ = value;
  // @@protoc_insertion_point(field_set:pb.Grid.MsgCameraImage.m_ImagerSizeU)
}

// optional sint32 m_ImagerSizeV = 100 [default = 960];
inline bool MsgCameraImage::has_m_imagersizev() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MsgCameraImage::set_has_m_imagersizev() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MsgCameraImage::clear_has_m_imagersizev() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MsgCameraImage::clear_m_imagersizev() {
  m_imagersizev_ = 960;
  clear_has_m_imagersizev();
}
inline ::google::protobuf::int32 MsgCameraImage::m_imagersizev() const {
  // @@protoc_insertion_point(field_get:pb.Grid.MsgCameraImage.m_ImagerSizeV)
  return m_imagersizev_;
}
inline void MsgCameraImage::set_m_imagersizev(::google::protobuf::int32 value) {
  set_has_m_imagersizev();
  m_imagersizev_ = value;
  // @@protoc_insertion_point(field_set:pb.Grid.MsgCameraImage.m_ImagerSizeV)
}

// optional uint32 m_OImagePattern = 110 [default = 3];
inline bool MsgCameraImage::has_m_oimagepattern() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MsgCameraImage::set_has_m_oimagepattern() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MsgCameraImage::clear_has_m_oimagepattern() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MsgCameraImage::clear_m_oimagepattern() {
  m_oimagepattern_ = 3u;
  clear_has_m_oimagepattern();
}
inline ::google::protobuf::uint32 MsgCameraImage::m_oimagepattern() const {
  // @@protoc_insertion_point(field_get:pb.Grid.MsgCameraImage.m_OImagePattern)
  return m_oimagepattern_;
}
inline void MsgCameraImage::set_m_oimagepattern(::google::protobuf::uint32 value) {
  set_has_m_oimagepattern();
  m_oimagepattern_ = value;
  // @@protoc_insertion_point(field_set:pb.Grid.MsgCameraImage.m_OImagePattern)
}

// optional bool m_ImageCompressed = 120 [default = true];
inline bool MsgCameraImage::has_m_imagecompressed() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MsgCameraImage::set_has_m_imagecompressed() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MsgCameraImage::clear_has_m_imagecompressed() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MsgCameraImage::clear_m_imagecompressed() {
  m_imagecompressed_ = true;
  clear_has_m_imagecompressed();
}
inline bool MsgCameraImage::m_imagecompressed() const {
  // @@protoc_insertion_point(field_get:pb.Grid.MsgCameraImage.m_ImageCompressed)
  return m_imagecompressed_;
}
inline void MsgCameraImage::set_m_imagecompressed(bool value) {
  set_has_m_imagecompressed();
  m_imagecompressed_ = value;
  // @@protoc_insertion_point(field_set:pb.Grid.MsgCameraImage.m_ImageCompressed)
}

// optional uint32 m_ImageCompressionType = 130 [default = 2];
inline bool MsgCameraImage::has_m_imagecompressiontype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MsgCameraImage::set_has_m_imagecompressiontype() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MsgCameraImage::clear_has_m_imagecompressiontype() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MsgCameraImage::clear_m_imagecompressiontype() {
  m_imagecompressiontype_ = 2u;
  clear_has_m_imagecompressiontype();
}
inline ::google::protobuf::uint32 MsgCameraImage::m_imagecompressiontype() const {
  // @@protoc_insertion_point(field_get:pb.Grid.MsgCameraImage.m_ImageCompressionType)
  return m_imagecompressiontype_;
}
inline void MsgCameraImage::set_m_imagecompressiontype(::google::protobuf::uint32 value) {
  set_has_m_imagecompressiontype();
  m_imagecompressiontype_ = value;
  // @@protoc_insertion_point(field_set:pb.Grid.MsgCameraImage.m_ImageCompressionType)
}

// optional uint32 m_ImageType = 140 [default = 3];
inline bool MsgCameraImage::has_m_imagetype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MsgCameraImage::set_has_m_imagetype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MsgCameraImage::clear_has_m_imagetype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MsgCameraImage::clear_m_imagetype() {
  m_imagetype_ = 3u;
  clear_has_m_imagetype();
}
inline ::google::protobuf::uint32 MsgCameraImage::m_imagetype() const {
  // @@protoc_insertion_point(field_get:pb.Grid.MsgCameraImage.m_ImageType)
  return m_imagetype_;
}
inline void MsgCameraImage::set_m_imagetype(::google::protobuf::uint32 value) {
  set_has_m_imagetype();
  m_imagetype_ = value;
  // @@protoc_insertion_point(field_set:pb.Grid.MsgCameraImage.m_ImageType)
}

// optional uint32 m_BytePerPixel = 150 [default = 1];
inline bool MsgCameraImage::has_m_byteperpixel() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MsgCameraImage::set_has_m_byteperpixel() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MsgCameraImage::clear_has_m_byteperpixel() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MsgCameraImage::clear_m_byteperpixel() {
  m_byteperpixel_ = 1u;
  clear_has_m_byteperpixel();
}
inline ::google::protobuf::uint32 MsgCameraImage::m_byteperpixel() const {
  // @@protoc_insertion_point(field_get:pb.Grid.MsgCameraImage.m_BytePerPixel)
  return m_byteperpixel_;
}
inline void MsgCameraImage::set_m_byteperpixel(::google::protobuf::uint32 value) {
  set_has_m_byteperpixel();
  m_byteperpixel_ = value;
  // @@protoc_insertion_point(field_set:pb.Grid.MsgCameraImage.m_BytePerPixel)
}

// optional uint32 m_BitPerPixel = 160 [default = 8];
inline bool MsgCameraImage::has_m_bitperpixel() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MsgCameraImage::set_has_m_bitperpixel() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MsgCameraImage::clear_has_m_bitperpixel() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MsgCameraImage::clear_m_bitperpixel() {
  m_bitperpixel_ = 8u;
  clear_has_m_bitperpixel();
}
inline ::google::protobuf::uint32 MsgCameraImage::m_bitperpixel() const {
  // @@protoc_insertion_point(field_get:pb.Grid.MsgCameraImage.m_BitPerPixel)
  return m_bitperpixel_;
}
inline void MsgCameraImage::set_m_bitperpixel(::google::protobuf::uint32 value) {
  set_has_m_bitperpixel();
  m_bitperpixel_ = value;
  // @@protoc_insertion_point(field_set:pb.Grid.MsgCameraImage.m_BitPerPixel)
}

// optional bytes m_ImagePayload = 170;
inline bool MsgCameraImage::has_m_imagepayload() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MsgCameraImage::set_has_m_imagepayload() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MsgCameraImage::clear_has_m_imagepayload() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MsgCameraImage::clear_m_imagepayload() {
  if (m_imagepayload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    m_imagepayload_->clear();
  }
  clear_has_m_imagepayload();
}
inline const ::std::string& MsgCameraImage::m_imagepayload() const {
  // @@protoc_insertion_point(field_get:pb.Grid.MsgCameraImage.m_ImagePayload)
  return *m_imagepayload_;
}
inline void MsgCameraImage::set_m_imagepayload(const ::std::string& value) {
  set_has_m_imagepayload();
  if (m_imagepayload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    m_imagepayload_ = new ::std::string;
  }
  m_imagepayload_->assign(value);
  // @@protoc_insertion_point(field_set:pb.Grid.MsgCameraImage.m_ImagePayload)
}
inline void MsgCameraImage::set_m_imagepayload(const char* value) {
  set_has_m_imagepayload();
  if (m_imagepayload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    m_imagepayload_ = new ::std::string;
  }
  m_imagepayload_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.Grid.MsgCameraImage.m_ImagePayload)
}
inline void MsgCameraImage::set_m_imagepayload(const void* value, size_t size) {
  set_has_m_imagepayload();
  if (m_imagepayload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    m_imagepayload_ = new ::std::string;
  }
  m_imagepayload_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.Grid.MsgCameraImage.m_ImagePayload)
}
inline ::std::string* MsgCameraImage::mutable_m_imagepayload() {
  set_has_m_imagepayload();
  if (m_imagepayload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    m_imagepayload_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.Grid.MsgCameraImage.m_ImagePayload)
  return m_imagepayload_;
}
inline ::std::string* MsgCameraImage::release_m_imagepayload() {
  clear_has_m_imagepayload();
  if (m_imagepayload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = m_imagepayload_;
    m_imagepayload_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgCameraImage::set_allocated_m_imagepayload(::std::string* m_imagepayload) {
  if (m_imagepayload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete m_imagepayload_;
  }
  if (m_imagepayload) {
    set_has_m_imagepayload();
    m_imagepayload_ = m_imagepayload;
  } else {
    clear_has_m_imagepayload();
    m_imagepayload_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Grid.MsgCameraImage.m_ImagePayload)
}

// optional bytes mBmpImage = 180;
inline bool MsgCameraImage::has_mbmpimage() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MsgCameraImage::set_has_mbmpimage() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MsgCameraImage::clear_has_mbmpimage() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MsgCameraImage::clear_mbmpimage() {
  if (mbmpimage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mbmpimage_->clear();
  }
  clear_has_mbmpimage();
}
inline const ::std::string& MsgCameraImage::mbmpimage() const {
  // @@protoc_insertion_point(field_get:pb.Grid.MsgCameraImage.mBmpImage)
  return *mbmpimage_;
}
inline void MsgCameraImage::set_mbmpimage(const ::std::string& value) {
  set_has_mbmpimage();
  if (mbmpimage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mbmpimage_ = new ::std::string;
  }
  mbmpimage_->assign(value);
  // @@protoc_insertion_point(field_set:pb.Grid.MsgCameraImage.mBmpImage)
}
inline void MsgCameraImage::set_mbmpimage(const char* value) {
  set_has_mbmpimage();
  if (mbmpimage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mbmpimage_ = new ::std::string;
  }
  mbmpimage_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.Grid.MsgCameraImage.mBmpImage)
}
inline void MsgCameraImage::set_mbmpimage(const void* value, size_t size) {
  set_has_mbmpimage();
  if (mbmpimage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mbmpimage_ = new ::std::string;
  }
  mbmpimage_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.Grid.MsgCameraImage.mBmpImage)
}
inline ::std::string* MsgCameraImage::mutable_mbmpimage() {
  set_has_mbmpimage();
  if (mbmpimage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mbmpimage_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.Grid.MsgCameraImage.mBmpImage)
  return mbmpimage_;
}
inline ::std::string* MsgCameraImage::release_mbmpimage() {
  clear_has_mbmpimage();
  if (mbmpimage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mbmpimage_;
    mbmpimage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgCameraImage::set_allocated_mbmpimage(::std::string* mbmpimage) {
  if (mbmpimage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mbmpimage_;
  }
  if (mbmpimage) {
    set_has_mbmpimage();
    mbmpimage_ = mbmpimage;
  } else {
    clear_has_mbmpimage();
    mbmpimage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Grid.MsgCameraImage.mBmpImage)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Grid
}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MsgCameraImage_2eproto__INCLUDED
